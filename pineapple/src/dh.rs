extern crate num_bigint_dig as num_bigint;
use num_bigint::BigUint;
use rand::RngCore;

const PRIME_BYTES: [u8; 96] = [
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f, 0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62,
    0x8b, 0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67, 0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13,
    0x9b, 0x22, 0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95, 0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30,
    0x2b, 0x0a, 0x6d, 0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51, 0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76,
    0x62, 0x5e, 0x7e, 0xc6, 0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x3a, 0x36, 0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff,
];

pub struct DiffieHellman {
    prime: BigUint,
    private_key: BigUint,
    public_key: BigUint,
    shared_key: BigUint,
}

impl DiffieHellman {
    pub fn random() -> Self {
        let prime = BigUint::from_bytes_be(&PRIME_BYTES);
        let generator = BigUint::from(2usize);
        let mut priv_key_bytes = [0; 95];
        rand::thread_rng().fill_bytes(&mut priv_key_bytes);
        let private_key = BigUint::from_bytes_be(&priv_key_bytes);
        let public_key = generator.modpow(&private_key, &prime);

        DiffieHellman {
            prime,
            private_key,
            public_key,
            shared_key: BigUint::from(0usize),
        }
    }

    pub fn public_bytes(&self) -> Vec<u8> {
        self.public_key.to_bytes_be()
    }

    pub fn compute_shared(&mut self, bytes: &[u8]) {
        let remote_key = BigUint::from_bytes_be(bytes);
        self.shared_key = remote_key.modpow(&self.private_key, &self.prime);
    }

    pub fn shared_bytes(&self) -> Vec<u8> {
        self.shared_key.to_bytes_be()
    }
}
